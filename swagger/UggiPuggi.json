{
  "swagger": "2.0",
  "info": {
    "description": "This is UggiPuggi server.",
    "version": "0.1.0",
    "title": "UggiPuggi"
  },
  "host": "0.0.0.0",
  "basePath": "/v1",
  "tags": [
    {
      "name": "recipes",
      "description": "Everything about your Recipes"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "groups",
      "description": "Operations about groups"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/recipes": {
      "post": {
        "tags": [
          "recipes"
        ],
        "summary": "Add a new recipe",
        "description": "",
        "operationId": "addRecipe",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Recipe object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "recipe_auth": [
              "write:recipes",
              "read:recipes"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "search a recipe by query",
        "description": "",
        "operationId": "searchRecipe",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Recipe name to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Recipes Found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recipe"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "recipe_auth": [
              "write:recipes",
              "read:recipes"
            ]
          }
        ]
      }
    },
    "/recipes/findByTags": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "Finds recipes by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findRecipeByTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recipe"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "recipe_auth": [
              "write:recipes",
              "read:recipes"
            ]
          }
        ],
        "deprecated": true
      }
    },
    "/recipes/{recipeId}": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "Find recipe by ID",
        "description": "Returns a single recipe",
        "operationId": "getRecipeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "description": "ID of recipe to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Authentication token provided not valid"
          },
          "404": {
            "description": "Recipe not found"
          },
          "428": {
            "description": "Authentication token not supplied"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "recipes"
        ],
        "summary": "Updates a recipe in the store with form data",
        "description": "",
        "operationId": "updateRecipeWithForm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "description": "ID of recipe that needs to be updated",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication token provided not valid"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "recipe_auth": [
              "write:recipes",
              "read:recipes"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "recipes"
        ],
        "summary": "Deletes a recipe",
        "description": "",
        "operationId": "deleteRecipe",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipeId",
            "in": "path",
            "description": "Recipe id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Authentication token provided not valid"
          },
          "404": {
            "description": "Recipe not found"
          }
        },
        "security": [
          {
            "recipe_auth": [
              "write:recipes",
              "read:recipes"
            ]
          }
        ]
      }
    },
    "/verify": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Getting user phone number to verify",
        "operationId": "verifyPhone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phone",
            "in": "query",
            "description": "User phone number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number accepted for verification"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User already exists with this phone number"
          },
          "503": {
            "description": "Failed to send OTP SMS!"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Verifying user phone number using OTP",
        "operationId": "verifyOTP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "OTP code send using SMS to user phone",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "OTP code accepted, phone number verified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication token provided not valid"
          },
          "403": {
            "description": "User phone number does not exist in verify database"
          },
          "406": {
            "description": "OTP supplied does not match with database"
          },
          "412": {
            "description": "Authentication token not supplied"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User already exists with supplied email"
          }
        }
      }
    },
    "/forgot_password": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Generate new temporary password and send to email.",
        "operationId": "forgotPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user email for emailing",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Password generated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User already exists with supplied email"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user email for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "401": {
            "description": "User does not exist"
          },
          "403": {
            "description": "Invalid userId/password supplied"
          }
        }
      }
    },
    "/password_change": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Changes user password in the system",
        "description": "",
        "operationId": "passwrodChange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user email for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_password",
            "in": "query",
            "description": "New password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "401": {
            "description": "User does not exist"
          },
          "403": {
            "description": "Invalid userId/password supplied"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Search users",
        "description": "This can only be done by the logged in user.",
        "operationId": "searchUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "displayName",
            "description": "User to be searched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User Found",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid values in request"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user profile by userId",
        "description": "Get user profile by userId",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of user to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User Found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request, user not found"
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user profile by userId",
        "description": "Update user profile by userId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of user to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile_data",
            "in": "body",
            "description": "The profile fields to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile updated successfully"
          },
          "400": {
            "description": "Bad Request, user not found"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "IO Error"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user profile",
        "description": "Delete user profile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of user to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile deleted successfully"
          },
          "400": {
            "description": "Bad Request, user not found"
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get all groups ids where user is member",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "userID",
            "description": "get all groups for userID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Group found"
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create new group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "new_group_data",
            "description": "new group data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New group created"
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete a group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "group_id",
            "description": "group_id of group to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted"
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get group information",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "groupId for which we need info",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Group found"
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Add new member to group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "groupId of the group to which to add member",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "member_id",
            "description": "list of member_ids to add to the group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member added successfully"
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Change group pic or profile info",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "groupId for which we need to change profile",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "new_profile_data",
            "description": "new profile data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "group updated successfully"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete a member in a group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "groupId from which member has to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "member_id",
            "description": "list of member_ids to be deleted from the group",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Member in the group deleted"
          },
          "401": {
            "description": "Unauthorized request"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "recipe_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://uggipuggi.com/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:recipes": "modify recipes in your account",
        "read:recipes": "read your recipes"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Group": {
      "type": "object",
      "required": [
        "group_name",
        "admin"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Automatically assigned by database (groupID)"
        },
        "group_name": {
          "type": "string"
        },
        "group_pic": {
          "type": "string"
        },
        "admin": {
          "type": "string",
          "description": "user_id of person creating group"
        },
        "created_time": {
          "type": "string",
          "description": "Automatically assigned by database"
        },
        "member_id": {
          "type": "array",
          "description": "List of member ids",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CookingActivity": {
      "type": "object",
      "required": [
        "user_id",
        "recipe_id",
        "likes_count"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Automatically assigned by database"
        },
        "user_id": {
          "type": "string"
        },
        "recipe_id": {
          "type": "string"
        },
        "likes_count": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "shares_count": {
          "type": "integer"
        },
        "prep_time": {
          "type": "integer",
          "format": "int32"
        },
        "cook_time": {
          "type": "integer",
          "format": "int32"
        },
        "activity_time_stamp": {
          "type": "string"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "role",
        "display_name",
        "email",
        "password",
        "phone",
        "country_code"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Automatically assigned by database"
        },
        "display_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "integer",
          "format": "int32",
          "description": "User Role (user:1, employee:8, admin:9)"
        },
        "country_code": {
          "type": "string",
          "description": "follows ISO_3166-1, max length 2"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "pw_last_changed": {
          "type": "string"
        },
        "phone_verified": {
          "type": "boolean"
        },
        "account_active": {
          "type": "boolean"
        },
        "public_profile": {
          "type": "boolean",
          "description": "False by default"
        },
        "app_platform": {
          "type": "string",
          "description": "ios or android (default)"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "display_pic": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "facebook_id": {
          "type": "string"
        },
        "twitter_id": {
          "type": "string"
        },
        "instagram_id": {
          "type": "string"
        },
        "subscription": {
          "type": "integer",
          "description": "User Role (free:1, premium:4, business:8, ads:10)"
        },
        "searchable_by_display_name": {
          "type": "boolean",
          "description": "False by default"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Automatically assigned by database"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Comment": {
      "type": "object",
      "required": [
        "user_id",
        "content"
      ],
      "properties": {
        "user_id": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "Recipe": {
      "type": "object",
      "required": [
        "recipe_name",
        "user_id",
        "user_name",
        "ingredients",
        "ingredients_quant",
        "ingredients_metric",
        "expose_level",
        "steps",
        "likes_count"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Automatically assigned by database"
        },
        "recipe_name": {
          "type": "string",
          "example": "Greek Salad"
        },
        "user_id": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "likes_count": {
          "type": "integer",
          "format": "int32"
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ingredients_quant": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ingredients_metric": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expose_level": {
          "type": "integer"
        },
        "ingredients_imgs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ingredients_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tips": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "xml": {
            "name": "images",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "rating_count": {
          "type": "integer",
          "format": "int32"
        },
        "shares_count": {
          "type": "integer",
          "format": "int32"
        },
        "rating_total": {
          "type": "integer",
          "format": "int32"
        },
        "prep_time": {
          "type": "integer",
          "format": "int32"
        },
        "cook_time": {
          "type": "integer",
          "format": "int32"
        },
        "last_modified": {
          "type": "string"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      },
      "xml": {
        "name": "Recipe"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}